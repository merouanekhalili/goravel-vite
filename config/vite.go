package config

import (
	"github.com/goravel/framework/facades"
)

func init() {
	config := facades.Config()
	config.Add("vite", map[string]any{
		// JS Framework
		//
		// Specifies the JavaScript framework to use. Currently, only "vue" and "react" are supported.
		"js_framework": config.Env("VITE_JS_FRAMEWORK", "vue"),

		// Entry Points
		//
		// Specifies the entry points for Vite. These are the files that Vite
		// will start processing from. Typically, this includes your main JavaScript
		// or TypeScript file and potentially a CSS file.
		// split by comma
		// e.g. "resources/js/main.ts,resources/css/app.css"
		"entry_points": config.Env("VITE_ENTRY_POINTS", "resources/js/main.ts"),

		// Development Server URL
		//
		// The URL where the Vite development server is running. This is used
		// by Goravel's Vite integration to load assets during development.
		"dev_server_url": config.Env("VITE_DEV_SERVER_URL", "http://localhost:5173"),

		// Assets Path
		//
		// The public path where compiled assets will be stored. Vite will place
		// the build output in this directory. Make sure this directory is publicly
		// accessible.
		"assets_path": config.Env("VITE_ASSETS_PATH", "public/build"),

		// Manifest Path
		//
		// The path to the Vite manifest file. This file contains a mapping of
		// source file names to their compiled, hashed counterparts. It's crucial
		// for loading the correct assets in production.
		"manifest_path": config.Env("VITE_MANIFEST_PATH", "public/build/.vite/manifest.json"),

		// Base URL
		//
		// The base URL path for the assets when served in production. This is
		// prefixed to the asset URLs generated by the Vite integration.
		"base_url": config.Env("VITE_BASE_URL", "/static"),
	})
}
